// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TitanInformationSolutions.Data;

namespace TitanInformationSolutions.Migrations
{
    [DbContext(typeof(TitanInformationSolutionsContext))]
    [Migration("20190314165010_initial2")]
    partial class initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TitanInformationSolutions.Models.BGCProgram", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("desc");

                    b.HasKey("ID");

                    b.ToTable("BGCPrograms");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Child", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DoB");

                    b.Property<int>("ParentID");

                    b.Property<string>("firstName")
                        .HasMaxLength(30);

                    b.Property<string>("lastName")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.child_Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildID");

                    b.Property<int?>("ParentID");

                    b.Property<int>("SectionID");

                    b.HasKey("ID");

                    b.HasIndex("ChildID");

                    b.HasIndex("ParentID");

                    b.HasIndex("SectionID");

                    b.ToTable("child_Sections");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasMaxLength(30);

                    b.Property<string>("firstName")
                        .HasMaxLength(30);

                    b.Property<string>("lastName")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.instructor_message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int>("instructorID");

                    b.Property<int>("messageID");

                    b.HasKey("ID");

                    b.HasIndex("instructorID");

                    b.HasIndex("messageID");

                    b.ToTable("Instructor_Messages");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.instructor_Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SectionID");

                    b.Property<int>("instructorID");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.HasIndex("instructorID");

                    b.ToTable("instructor_Sections");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<string>("From");

                    b.Property<string>("To");

                    b.HasKey("ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Parent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasMaxLength(100);

                    b.Property<bool>("feedNote");

                    b.Property<string>("firstName")
                        .HasMaxLength(30);

                    b.Property<string>("lastName")
                        .HasMaxLength(30);

                    b.Property<long>("phone");

                    b.Property<bool>("privNote");

                    b.HasKey("ID");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Parent_Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int>("messageID");

                    b.Property<int>("parentID");

                    b.HasKey("ID");

                    b.HasIndex("messageID");

                    b.HasIndex("parentID");

                    b.ToTable("Parent_Messages");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Posts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentID");

                    b.Property<string>("Post");

                    b.Property<string>("firstName")
                        .HasMaxLength(30);

                    b.Property<string>("lastName")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BGCProgramID");

                    b.Property<DateTime>("End");

                    b.Property<string>("Location");

                    b.Property<DateTime>("Start");

                    b.HasKey("ID");

                    b.HasIndex("BGCProgramID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Sub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(127);

                    b.Property<int>("ParentID");

                    b.Property<string>("PushAuth")
                        .HasMaxLength(512);

                    b.Property<string>("PushEndpoint")
                        .HasMaxLength(512);

                    b.Property<string>("PushP256DH")
                        .HasMaxLength(512);

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Subs");
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Child", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.child_Section", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Child", "child")
                        .WithMany("ChildSections")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TitanInformationSolutions.Models.Parent")
                        .WithMany("childSections")
                        .HasForeignKey("ParentID");

                    b.HasOne("TitanInformationSolutions.Models.Section", "Section")
                        .WithMany("ChildSections")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.instructor_message", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Instructor", "Instructor")
                        .WithMany("Instructor_Messages")
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TitanInformationSolutions.Models.Message", "message")
                        .WithMany()
                        .HasForeignKey("messageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.instructor_Section", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Section", "Section")
                        .WithMany("InstructorSections")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TitanInformationSolutions.Models.Instructor", "Instructor")
                        .WithMany("Instructor_Sections")
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Parent_Message", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Message", "message")
                        .WithMany()
                        .HasForeignKey("messageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TitanInformationSolutions.Models.Parent", "Parent")
                        .WithMany("Parent_Messages")
                        .HasForeignKey("parentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Section", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.BGCProgram", "BGCProgram")
                        .WithMany("Sections")
                        .HasForeignKey("BGCProgramID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitanInformationSolutions.Models.Sub", b =>
                {
                    b.HasOne("TitanInformationSolutions.Models.Parent", "Parent")
                        .WithMany("Subs")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
